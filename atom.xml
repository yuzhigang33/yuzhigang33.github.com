<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[俞小刚的个人博客]]></title>
  <link href="http://yuzhigang33.github.io/atom.xml" rel="self"/>
  <link href="http://yuzhigang33.github.io/"/>
  <updated>2013-08-31T23:04:07+08:00</updated>
  <id>http://yuzhigang33.github.io/</id>
  <author>
    <name><![CDATA[eleven]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[javascript学习摘记]]></title>
    <link href="http://yuzhigang33.github.io/blog/2013/08/31/javascriptxue-xi-zhai-ji/"/>
    <updated>2013-08-31T22:31:00+08:00</updated>
    <id>http://yuzhigang33.github.io/blog/2013/08/31/javascriptxue-xi-zhai-ji</id>
    <content type="html"><![CDATA[<p>想好好学习下js了，最近看到这个<a href="http://javascript.ruanyifeng.com/">Javascript标准教程</a>，是我很喜欢也很习惯看的笔记性质的教程。
希望不再是三天热度，好好整理一番，做些笔记。</p>

<hr />

<h3>JavaScript编程风格</h3>

<ol>
<li>尽量避免使用with语句。</li>
<li>不要使用&#8221;相等&#8221;（==）运算符，只使用&#8221;严格相等&#8221;（===）运算符。</li>
<li>把变量声明都放在代码块的头部。</li>
<li>所有变量声明都放在函数的头部，所有函数都在使用之前定义。</li>
<li>全局变量对于任何一个代码块，都是可读可写,因此，避免使用全局变量。</li>
<li>不要使用new命令，改用Object.create()命令。</li>
<li>eval不提供单独的作用域，而是直接在全局作用域运行，因此，避免使用eval函数。</li>
</ol>


<h3>基本语法</h3>

<ol>
<li>如果一个运算子是数值类型，另一个是其他类型，那么除了加法运算符，在其他运算符的情况下，另一个运算子都会被转化成数值类型。</li>
<li>在JavaScript中，圆括号是一种运算符，作用是求值。</li>
<li>NaN与任何值都不相等（包括其自身）。</li>
<li>两个复合类型的量比较时（包括对象、数组、函数），不是比较它们的值是否相等，而是比较它们是否指向同一个对象。</li>
<li>Javascript只有两种作用域：一种是全局作用域，变量在整个程序中一直存在；另一种是函数作用域，变量只在函数内部存在。</li>
<li>JSON格式：

<ul>
<li>每个成员的值，可以是简单值，也可以是复合值。</li>
<li>简单值分为四种：字符串、数值（必须以十进制表示）、布尔值和null。</li>
<li>复合值分为两种：符合JSON格式的对象、符合JSON格式的数组。</li>
<li>最后一个成员的后面，不能加逗号。</li>
<li>字符串必须使用双引号，不能使用单引号。</li>
<li>属性名也必须使用双引号。</li>
</ul>
</li>
</ol>


<hr />

<p>（未完待续）</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[什么样的才是好教程]]></title>
    <link href="http://yuzhigang33.github.io/blog/2013/08/17/what-is-a-good-tutorial/"/>
    <updated>2013-08-17T22:41:00+08:00</updated>
    <id>http://yuzhigang33.github.io/blog/2013/08/17/what-is-a-good-tutorial</id>
    <content type="html"><![CDATA[<p>当我们在接触一个新事物的时候，习惯性的总是喜欢查看入门教程</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[New Start]]></title>
    <link href="http://yuzhigang33.github.io/blog/2013/08/08/new-start/"/>
    <updated>2013-08-08T22:01:00+08:00</updated>
    <id>http://yuzhigang33.github.io/blog/2013/08/08/new-start</id>
    <content type="html"><![CDATA[<p>有一种套路应该是这样的，用<a href="http://github.io">github</a> 、<a href="http://octopress.org">octopress</a> 这种<strong><em>高端-大气-上档次</em></strong>的东西搭一个博客，首先得写一篇step by step的教程。</p>

<p>当然不能落入这种俗套，应当第二篇再写^_^。</p>

<p>对于<strong>新的征程</strong>这样的屌丝标题总归是写不出什么好内容来。</p>

<p>只是觉得有些事情延误的太久了，久到再不动动脑子，敲敲键盘就来不及记下一段时光，一段把技术当风月的时光。</p>

<p>掐脚指一算，正式工作已经一年多了，写了十几个月的C程序，整得自己真像个程序员了。</p>

<p>为了以下几点，以此篇作为新的开始：</p>

<h6>1、为了思考，顺便也记录，也许可以回忆；</h6>

<h6>2、为了阐述，顺便也推销，也许可以增值；</h6>

<h6>3、为了做个真正的程序员。</h6>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello World]]></title>
    <link href="http://yuzhigang33.github.io/blog/2013/08/07/hello-world/"/>
    <updated>2013-08-07T21:58:00+08:00</updated>
    <id>http://yuzhigang33.github.io/blog/2013/08/07/hello-world</id>
    <content type="html"><![CDATA[<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include&lt;stdio.h&gt;</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Hello World!&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
</feed>
